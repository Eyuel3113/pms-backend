generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Tenant {
  id         String   @id @default(cuid())
  name       String
  email      String   @unique
  phone      String
  unit       Unit?    @relation(fields: [unitId], references: [id])
  unitId     String?  @unique
  leases     Lease[]
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  tenantOf   Property @relation(fields: [propertyId], references: [id])
  propertyId String

  notifications Notification[]
  activityLogs  ActivityLog[]
}

model Property {
  id        String   @id @default(cuid())
  name      String
  address   String
  units     Unit[]
  tenants   Tenant[]
  managerId String
  manager   User     @relation(fields: [managerId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  companyId String
  company   Company  @relation(fields: [companyId], references: [id])

  activityLogs ActivityLog[]
}

model Unit {
  id         String   @id @default(cuid())
  name       String
  floor      Int
  propertyId String
  property   Property @relation(fields: [propertyId], references: [id])
  tenant     Tenant?
  leases     Lease[]
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([name, floor, propertyId]) // compound unique constraint
}

model Lease {
  id         String    @id @default(cuid())
  startDate  DateTime
  endDate    DateTime
  rentAmount Float
  tenantId   String
  tenant     Tenant    @relation(fields: [tenantId], references: [id])
  unitId     String
  unit       Unit      @relation(fields: [unitId], references: [id])
  payments   Payment[]
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt

  activityLogs ActivityLog[]
}

model Payment {
  id        String    @id @default(cuid())
  leaseId   String
  lease     Lease     @relation(fields: [leaseId], references: [id])
  amount    Float
  status    String // paid, pending, failed
  method    String // stripe, paypal, etc.
  paidAt    DateTime?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  activityLogs ActivityLog[]
}

model User {
  id                String     @id @default(cuid())
  name              String
  email             String     @unique
  password          String
  role              String
  companyId         String?
  isVerified        Boolean    @default(false)
  verificationToken String?
  createdAt         DateTime   @default(now())
  updatedAt         DateTime   @updatedAt
  Property          Property[]
  Company           Company?   @relation(fields: [companyId], references: [id])

  notifications Notification[]
  activityLogs  ActivityLog[]
}

model Company {
  id         String     @id @default(cuid())
  name       String
  users      User[]
  properties Property[]
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt

  activityLogs ActivityLog[]
}

model Notification {
  id        String   @id @default(cuid())
  message   String
  type      String // e.g., "PAYMENT_DUE", "LEASE_ENDING", "SYSTEM_ALERT"
  read      Boolean  @default(false)
  userId    String?
  tenantId  String?
  createdAt DateTime @default(now())

  user   User?   @relation(fields: [userId], references: [id])
  tenant Tenant? @relation(fields: [tenantId], references: [id])
}

model ActivityLog {
  id         String   @id @default(cuid())
  action     String // e.g., "CREATED_PROPERTY", "UPDATED_LEASE", "PAID_RENT"
  entity     String // e.g., "Property", "Lease", "Payment"
  entityId   String? // ID of the related entity
  userId     String?
  tenantId   String?
  propertyId String?
  leaseId    String?
  paymentId  String?
  companyId  String?
  createdAt  DateTime @default(now())

  user     User?     @relation(fields: [userId], references: [id])
  tenant   Tenant?   @relation(fields: [tenantId], references: [id])
  property Property? @relation(fields: [propertyId], references: [id])
  lease    Lease?    @relation(fields: [leaseId], references: [id])
  payment  Payment?  @relation(fields: [paymentId], references: [id])
  company  Company?  @relation(fields: [companyId], references: [id])
}

enum Role {
  SUPER_ADMIN
  COMPANY_ADMIN
  PROPERTY_MANAGER
  TENANT
}
