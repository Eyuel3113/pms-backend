generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

//  =================   Tenant  ===============

model Tenant {
  id        String  @id @default(cuid())
  userId    String  @unique
  unitId    String? @unique
  companyId String

  propertyId String?
  property   Property? @relation("PropertyTenants", fields: [propertyId], references: [id])

  // Relations
  user     User      @relation(fields: [userId], references: [id])
  unit     Unit?     @relation(fields: [unitId], references: [id])
  company  Company   @relation(fields: [companyId], references: [id])
  leases   Lease[]
  invoices Invoice[]
  payments Payment[]

  notifications Notification[]
  activityLogs  ActivityLog[]
}

//  =================   Property  ===============

model Property {
  id        String  @id @default(cuid())
  name      String
  address   String
  units     Unit[]
  managerId String
  manager   User    @relation(fields: [managerId], references: [id])
  companyId String
  company   Company @relation(fields: [companyId], references: [id])

  tenants  Tenant[]  @relation("PropertyTenants") // must match Tenant.property
  invoices Invoice[]
  payments Payment[]

  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  activityLogs ActivityLog[]
}

//  =================   Unit  ===============

model Unit {
  id         String   @id @default(cuid())
  name       String
  floor      Int
  propertyId String
  property   Property @relation(fields: [propertyId], references: [id])
  tenant     Tenant?
  leases     Lease[]
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([name, floor, propertyId]) // compound unique constraint
}

//  =================   Lease  ===============

model Lease {
  id         String      @id @default(cuid())
  tenantId   String
  unitId     String
  startDate  DateTime
  endDate    DateTime
  rentAmount Float
  deposit    Float?
  status     LeaseStatus @default(ACTIVE)

  // Relations
  tenant   Tenant    @relation(fields: [tenantId], references: [id])
  unit     Unit      @relation(fields: [unitId], references: [id])
  invoices Invoice[]
  payments Payment[]

  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  activityLogs ActivityLog[]
}

//  =================   Payment  ===============

model Payment {
  id         String   @id @default(cuid())
  invoiceId  String
  leaseId    String?
  tenantId   String
  propertyId String
  amount     Float
  method     String
  status     String   @default("COMPLETED")
  paidAt     DateTime @default(now())
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  invoice  Invoice  @relation(fields: [invoiceId], references: [id])
  lease    Lease?   @relation(fields: [leaseId], references: [id])
  tenant   Tenant   @relation(fields: [tenantId], references: [id])
  property Property @relation(fields: [propertyId], references: [id]) // <-- now matches Property.payments

  activityLogs ActivityLog[]
}

//  =================   Invoice  ===============

model Invoice {
  id         String   @id @default(cuid())
  leaseId    String
  tenantId   String
  propertyId String
  amount     Float
  status     String   @default("PENDING")
  dueDate    DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  lease    Lease     @relation(fields: [leaseId], references: [id])
  tenant   Tenant    @relation(fields: [tenantId], references: [id])
  property Property  @relation(fields: [propertyId], references: [id]) // <-- now matches Property.invoices
  payments Payment[]
}

//  =================   User  ===============

model User {
  id                String   @id @default(cuid())
  name              String
  email             String   @unique
  password          String
  role              String
  companyId         String?
  isVerified        Boolean  @default(false)
  verificationToken String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  // Relations
  Property Property[]
  Company  Company?   @relation(fields: [companyId], references: [id])
  Tenant   Tenant? // just back-relation, no fields/references here

  notifications Notification[]
  activityLogs  ActivityLog[]
}

//  =================   Company  ===============

model Company {
  id         String     @id @default(cuid())
  name       String
  users      User[]
  properties Property[]
  tenants    Tenant[]
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt

  activityLogs ActivityLog[]
}

//  =================   Notification  ===============

model Notification {
  id        String   @id @default(cuid())
  message   String
  type      String // e.g., "PAYMENT_DUE", "LEASE_ENDING", "SYSTEM_ALERT"
  read      Boolean  @default(false)
  userId    String?
  tenantId  String?
  createdAt DateTime @default(now())

  user   User?   @relation(fields: [userId], references: [id])
  tenant Tenant? @relation(fields: [tenantId], references: [id])
}

//  =================   ActivityLog  ===============

model ActivityLog {
  id         String   @id @default(cuid())
  action     String
  entity     String
  entityId   String?
  userId     String?
  tenantId   String?
  propertyId String?
  leaseId    String?
  paymentId  String?
  companyId  String?
  createdAt  DateTime @default(now())

  user     User?     @relation(fields: [userId], references: [id])
  tenant   Tenant?   @relation(fields: [tenantId], references: [id])
  property Property? @relation(fields: [propertyId], references: [id])
  lease    Lease?    @relation(fields: [leaseId], references: [id])
  payment  Payment?  @relation(fields: [paymentId], references: [id])
  company  Company?  @relation(fields: [companyId], references: [id])
}

enum Role {
  SUPER_ADMIN
  COMPANY_ADMIN
  PROPERTY_MANAGER
  TENANT
}

enum LeaseStatus {
  ACTIVE
  EXPIRED
  TERMINATED
}
